plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'org.sonarqube' version '3.5.0.2730'
}

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    // Web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // Jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    // Mapstruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    // Bcrypt
    implementation 'org.springframework.security:spring-security-crypto:6.2.4'
    // Security
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    // JDBC Connector
    runtimeOnly 'com.mysql:mysql-connector-j'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.0'
    // H2
    testImplementation 'com.h2database:h2:2.2.224'
}

compileJava {
    options.compilerArgs = [
            "-parameters",
            "-Amapstruct.suppressGeneratorTimestamp=true",
            "-Amapstruct.defaultComponentModel=spring",
            "-Amapstruct.verbose=true"
    ]
}

tasks.named('test') {
    jacoco {
        excludes = [
                'com/franktranvantu/springboot3/dto/**',
                'com/franktranvantu/springboot3/entity/**',
                'com/franktranvantu/springboot3/mapper/**',
                'com/franktranvantu/springboot3/configuration/**'
        ]
    }
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.85
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        html.enabled true
    }
    dependsOn test
}

spotless {
    java {
        removeUnusedImports()
        palantirJavaFormat()
    }
}
